<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HEXO展示pdf</title>
      <link href="/2024/05/05/HEXO%E5%B1%95%E7%A4%BApdf/"/>
      <url>/2024/05/05/HEXO%E5%B1%95%E7%A4%BApdf/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="20211218-ORB-SLAM3课程电子书【课件】.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://blog.justlovesmile.top/posts/7376.html?time=1714893303622">Hexo博客 | Hexo竟然可以展示PDF</a></p><p><strong>一遍成功，随便放了个pdf上去</strong></p>]]></content>
      
      
      <categories>
          
          <category> HEXO建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLAM_JOURNEY</title>
      <link href="/2024/05/05/SLAM_JOURNEY/"/>
      <url>/2024/05/05/SLAM_JOURNEY/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="研0入门"><a href="#研0入门" class="headerlink" title="研0入门"></a>研0入门</h1><h2 id="了解研究领域概况"><a href="#了解研究领域概况" class="headerlink" title="了解研究领域概况"></a>了解研究领域概况</h2><ol><li>了解研究领域的背景</li><li>由背景入手建立研究领域的框架</li><li></li></ol><h3 id="寻找适合的文献"><a href="#寻找适合的文献" class="headerlink" title="寻找适合的文献"></a>寻找适合的文献</h3><ol><li>找准关键术语，用不同的数据库检索文献 </li></ol><hr><h2 id="SLAM十四讲学习"><a href="#SLAM十四讲学习" class="headerlink" title="SLAM十四讲学习"></a>SLAM十四讲学习</h2><h3 id="学习这本书的方法"><a href="#学习这本书的方法" class="headerlink" title="学习这本书的方法"></a>学习这本书的方法</h3><ol><li><strong>理解算法</strong>，补习数学基础</li><li><strong>应用实践</strong>，跟着书敲代码，调调参数</li><li><strong>习题</strong>，建议都练习一遍，对掌握知识很有帮助</li></ol><h3 id="SLAM的数学描述"><a href="#SLAM的数学描述" class="headerlink" title="SLAM的数学描述"></a>SLAM的数学描述</h3><script type="math/tex; mode=display">\begin{cases}    x_{k+1} = f(x_k,u_k)+w_k &\text{运动}\\    z_{k,j} = h(x_k,y_j)+v_{k,j} &\text{观测}\\\end{cases}</script><p>已知$(u<em>k,z</em>{k,j})\to(x_k\text{定位},y_j\text{建图})$，相当于一个状态估计问题</p><h3 id="第3讲-三维空间刚体运动"><a href="#第3讲-三维空间刚体运动" class="headerlink" title="第3讲 三维空间刚体运动"></a>第3讲 三维空间刚体运动</h3><p><strong>坐标系间的欧式变换</strong></p><p>使用一个旋转矩阵<strong>R</strong>和一个平移向量<strong>t</strong>完整地描述了一个欧氏空间的坐标变换</p><script type="math/tex; mode=display">a^`=Ra+t</script><p>但上述描述经过多次变换会显得很罗嗦并存在非线性关系，因此，引入<strong>齐次坐标</strong>和<strong>变换矩阵</strong></p><script type="math/tex; mode=display">\begin{bmatrix}a^`\\1\end{bmatrix}=\begin{bmatrix}R & t\\0^T & 1\end{bmatrix}\begin{bmatrix}a\\1\end{bmatrix}\overset{\text{def}}{=}T\begin{bmatrix}a\\1\end{bmatrix}</script><p>这样使得整个变系为线性关系，其中矩阵<strong>T</strong>称为<strong>变换矩阵</strong></p><p><u>关于四元数旋转，矩阵的迹还没有搞懂—2023.10.20</u></p><h4 id="useGeometry例程理解"><a href="#useGeometry例程理解" class="headerlink" title="useGeometry例程理解"></a>useGeometry例程理解</h4><p>针对<code>useGeometry</code>例程，主要作用在于</p><blockquote><ol><li>设定旋转向量（旋转角度，沿哪个轴旋转</li><li>由旋转向量得到旋转矩阵</li><li>使用Angle Axis和旋转矩阵进行坐标变换</li><li>欧拉角的转换（由旋转向量直接转换）</li><li>将旋转向量转换为欧式变换矩阵进行坐标变换</li><li>使用四元数即进行坐标变换（也由旋转向量转换而来）</li></ol></blockquote><h4 id="plotTrajectory例程理解"><a href="#plotTrajectory例程理解" class="headerlink" title="plotTrajectory例程理解"></a>plotTrajectory例程理解</h4><p><code>Isometry3d</code>是Eigen库中的一个类，用于表示三维空间中的等距变换（Isometry）。等距变换是一种保持距离和角度不变的变换，它包括平移和旋转。</p><p><code>Quaterniond</code>是Eigen库中的一个类，用于表示四元数（Quaternion）。四元数是一种数学工具，用于表示旋转或姿态的一种方式。与欧拉角和旋转矩阵相比，四元数具有一些优点，例如不存在万向锁问题，具有更高的计算效率等。</p><p>对于<code>plotTrajectory</code>程序，程序思路如下</p><blockquote><ol><li>定义vector类型的poses用于存储变换矩阵</li><li>对每个时间的目标进行旋转(Quaterniond)和平移（pretranslate）</li><li>绘制轨迹</li></ol></blockquote><p>对于<code>DrawTrajectory</code>函数，理解如下</p><blockquote><p>先往下看吧，这段代码貌似不那么重要~</p></blockquote><h3 id="第4讲-李群与李代数"><a href="#第4讲-李群与李代数" class="headerlink" title="第4讲 李群与李代数"></a>第4讲 李群与李代数</h3><h4 id="李群与李代数基础"><a href="#李群与李代数基础" class="headerlink" title="李群与李代数基础"></a>李群与李代数基础</h4><p>理解了李群和李代数的概念，掌握SO(3)、SE(3)与对应李代数的表示方式</p><p>三维旋转矩阵构成了特殊正交群SO(3)，变换矩阵构成了特殊欧式群SE(3)</p><ul><li>对于只有一个（良好的）运算的集合，我们称作<strong>群</strong></li></ul><p>由$RR^T=I$进行求导，得到了$exp(\phi_0^{\land)}=R$</p><p>对于SO(3)上的指数映射是将$exp(\phi^{\land})=\sum_{n=0}^{\infty}\frac{1}{n!}(\phi^{\land})^n$，再通过将$\phi$分解为模长$\theta$和方向$a$对其泰勒展开进行化简，最后得到和罗德里格斯公式一样的式子</p><ul><li>但遗憾的是并不是每个旋转矩阵$R$都能找到唯一的$\phi$，指数映射只是一个满射，并不是单射。类似于第三讲的<u>万向锁问题</u>？</li><li>如果我们把旋转角度固定到$±\pi$之间，那么李群和李代数元素是一一对应的</li></ul><p>SE(3)上的指数映射同理，从而得到李群与李代数的三维旋转和三维变换的对应关系，见书p81</p><h4 id="李代数求导与扰动模型"><a href="#李代数求导与扰动模型" class="headerlink" title="李代数求导与扰动模型"></a>李代数求导与扰动模型</h4><p><strong>近似公式</strong></p><p>在李代数上进行加法运算并不能对应SO(3)的两个矩阵乘积。但是，当$\phi_1$或$\phi_2$为小量时，小量二次以上的项都可以被忽略。此时，BCH拥有线性近似表达：</p><script type="math/tex; mode=display">ln(exp(\phi_1^{\land})exp(\phi_2^{\land}))^{\vee}\approx\begin{cases}J_l(\phi_2)^{-1}\phi_1+\phi_2，当\phi_1为小量\\J_r(\phi_1)^{-1}\phi_2+\phi_1，当\phi_2为小量\end{cases}</script><p>对于某个旋转R，对应的李代数为$\phi$。我们给它左乘一个微小旋转，记作$\Delta R$，对应的李代数为$\Delta\phi$。那么，在李群上，得到的结果就是$\Delta R*R$，而在李代数上，根据BCH近似，为$J_l^{-1}(\phi)\Delta\phi+\phi$。合并起来，可以写成：</p><script type="math/tex; mode=display">exp(\Delta\phi^{\land})exp(\phi^{\land})=exp((\phi+J_l^{-1}(\phi)\Delta\phi)^{\land})</script><p>反之亦然</p><script type="math/tex; mode=display">exp((\phi+\Delta\phi)^{\land}) = exp((J_l\Delta\phi)^{\land})exp(\phi^{\land})=exp(\phi^{\land})exp((J_r\Delta\phi)^{\land})</script><p><strong>李代数求导</strong></p><h3 id="第7讲-视觉里程计1"><a href="#第7讲-视觉里程计1" class="headerlink" title="第7讲 视觉里程计1"></a>第7讲 视觉里程计1</h3><p>SLAM系统分为前端和后端，</p><hr><h2 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2><p>SLAM十四讲使用ubuntu20.04操作系统为基础。在Windows里面，设置不好设备，您可以骂它，在Linux里面，如果设置好设备，您要感激它！</p><p>Linux系统由于是开源的操作系统，所以他的程序代码可以被修改成适合在各种机器、不同的硬件上运行。<u>Linux的可移植性</u></p><h3 id="Linux的文件权限与目录配置"><a href="#Linux的文件权限与目录配置" class="headerlink" title="Linux的文件权限与目录配置"></a>Linux的文件权限与目录配置</h3><img src="/2024/05/05/SLAM_JOURNEY/image-20240505113554285.png" class="" title="image-20240505113554285"><p>使用<code>ls -al</code>命令查看文件属性，<a href="https://foxgrin.github.io/posts/26833/">Linux的文件权限与目录配置</a></p><h3 id="遇到的一些错误和问题"><a href="#遇到的一些错误和问题" class="headerlink" title="遇到的一些错误和问题"></a>遇到的一些错误和问题</h3><ol><li><p>cmake后没有make出现error </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash: fg: %: 无此任务</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>cmake后再添加<strong>make</strong></p></li><li><p>添加库文件会报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6 |         printHello();</span><br><span class="line">  |         ^~~~~~~~~~</span><br><span class="line">  |         printHELLO</span><br></pre></td></tr></table></figure><p>检查源文件发现没有错误，检查库文件后才发现把函数名称定义错误</p><blockquote><p> 解决办法:在头文件中拼写错误的函数名称修正</p></blockquote></li><li><p>KDevelop中断点在边框中用鼠标点不了</p><p>解决办法，光标选中某一行使用<strong>Ctrl+Alt+B</strong>快捷键来打<strong>断点</strong></p></li><li><p>针对某一程序Excute不能输出结果不正常，为另一个程序的输出结果，<strong>是由于Run</strong>中的<strong>Configure Launch</strong>的配置问题</p><blockquote><p>解决办法：修改Configure Launch中的target project为目标程序文件</p></blockquote></li><li><p>KDevelop如何建立新工程?</p><p><a href="https://blog.csdn.net/weixin_44436677/article/details/106268768?app_version=6.1.7&amp;csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22106268768%22%2C%22source%22%3A%22weixin_53370601%22%7D&amp;utm_source=app">KDevelop建立新工程-CSDN</a></p></li><li><p>安装好Pangolin库后，运行ch3中的plotJecttory程序时，报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error while loading shared libraries: libpango_windowing.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><blockquote><p> 解决办法：是由于动态链接库异常，没有正确的加载共享库Terminal输入<code>sudo ldconfig</code>即可</p></blockquote><p><a href="https://blog.csdn.net/kingkingsssss/article/details/130861026?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169892548716800185877883%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169892548716800185877883&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-130861026-null-null.142^v96^pc_search_result_base3&amp;utm_term=error%20while%20loading%20shared%20libraries%3A%20libpango_windowing.so%3A%20cannot%20open%20shared%20object%20file%3A%20No%20such%20file%20or%20directory&amp;spm=1018.2226.3001.4187">CSDN解决办法</a></p></li><li><p>KDevelop设置C++11标准</p><blockquote><p>CMAKE_CXX_FLAGS -&gt; -std=c++11</p></blockquote></li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>查看eigen3版本，对于其他库更换名字即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkg-config --modversion eigen3 </span><br></pre></td></tr></table></figure><p><code>apt-get</code>命令是一个功能强大且免费的包管理命令行程序，用于与Ubuntu的APT（高级打包工具）库配合执行新软件包的安装、删除现有软件包、升级现有软件包、甚至用于升级整个操作系统。</p><ul><li><p>更新系统包</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>升级系统包</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li></ul><p>查看Linux内核版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>关机命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poweroff</span><br><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><p>重启命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>查看ubuntu版本号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p><strong>vim命令</strong></p><p><a href="https://www.runoob.com/linux/linux-vim.html">vim命令</a></p><hr><h2 id="数学基础问题"><a href="#数学基础问题" class="headerlink" title="数学基础问题"></a>数学基础问题</h2><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><p><strong>反对称矩阵</strong></p><p><a href="https://blog.csdn.net/CSSDCC/article/details/121653596">SLAM反对称矩阵</a></p><p>通过<strong>反对称矩阵</strong>将向量的乘法变为线性运算</p><blockquote><p>反对称矩阵满足</p><script type="math/tex; mode=display">A^T=-A</script></blockquote><ul><li>斜对称矩阵自身相乘的积是<a href="https://zh.wikipedia.org/wiki/對稱矩陣">对称矩阵</a>。</li><li>任意矩阵$A,A^T-A$是斜对称矩阵。</li><li>若是$A$是斜对称矩阵，$x$是向量，$x^TAx=0$</li><li>斜对称矩阵的主对角线元素必是零，所以其<a href="https://zh.wikipedia.org/wiki/跡數">迹数</a>为零。</li></ul><p><strong>单位正交基</strong></p><p><a href="https://blog.csdn.net/Jakob_Hu/article/details/90813435">线性代数(14)——正交性、标准正交基和投影</a></p><p>一个n维空间中任何一组线性无关的向量，都是这个n维空间的一组基。当这组基的向量两两垂直，则称为正交基。</p><p>三维空间中的单位正交基可以表示为一个 3x3 的矩阵，其中每一列代表一个基向量。假设单位正交基的三个基向量分别为 u, v, w，它们可以组成以下矩阵形式：</p><script type="math/tex; mode=display">\begin{bmatrix} u₁ & v₁ & w₁\\u₂ & v₂ & w₂\\u₃ & v₃ & w₃ \end{bmatrix}</script><p>其中 u₁, u₂, u₃ 是向量 u 的三个分量，v₁, v₂, v₃ 是向量 v 的三个分量，w₁, w₂, w₃ 是向量 w 的三个分量。</p><p>具体表示如下所示：</p><script type="math/tex; mode=display">x\begin{bmatrix} 1 & 0 & 0\\0 & 1 & 0\\0 & 0 & 1 \end{bmatrix}</script><p><strong>正交矩阵</strong></p><ol><li>所有的列向量都是单位正交向量</li><li>所有的行向量都是单位正交向量</li><li>detA = +1 或detA =-1</li><li>若detA =1，则A为n维旋转矩阵 ()，旋转矩阵X旋转矩阵=旋转矩阵</li><li>向量X的范数(Norm) 或欧拉长度（Euclidean Length ）</li><li>正交矩阵对向量进行正交变换，且正交变换不改变向量的长度(范数)：设X的正交变换为AX，则AX的范数为：由此可见AX的范数与X的范数相等</li></ol><h3 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h3><hr>]]></content>
      
      
      <categories>
          
          <category> SLAM学习 </category>
          
          <category> SLAM基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO更改字体</title>
      <link href="/2024/05/04/HEXO%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93/"/>
      <url>/2024/05/04/HEXO%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO更改字体"><a href="#HEXO更改字体" class="headerlink" title="HEXO更改字体"></a>HEXO更改字体</h1><p>hexo自带的字体很不好看，可能是创始人是台湾的原因？字体有一种简繁之间的感觉，看着有点别扭，于是想着更改一下字体。</p><p>参考教程：</p><p><a href="https://www.luxiyue.com/server/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9hexo%E4%B8%BB%E9%A2%98%EF%BC%9Abutterfly%E7%BD%91%E7%AB%99%E5%AD%97%E4%BD%93/">如何修改Hexo主题：Butterfly网站字体</a></p><p><a href="https://blog.aizhiqian.xyz/posts/ca2ce3bc/">【Hexo】自定义字体</a></p><p>参考以上教程，我是这么操作的：</p><ol><li><p>在<code>/source</code>目录下创建存储字体的文件夹<code>font</code>和存储css的文件夹<code>css</code></p></li><li><p>字体网站下载喜欢的字体，我用的是<a href="https://fonts.google.com/">谷歌字体</a>，将下载好的字体存储到<code>/source/font</code>文件夹中</p></li><li><p>在<code>/source/css</code>文件夹中创建文件<code>custom.css</code></p></li><li><p>编写<code>custom.css</code>文件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="comment">/* 为载入的字体取名字(随意) */</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Junbo Font&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 字体文件地址(相对或者绝对路径都可以) */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/font/sunny-spells-basic-font/SunnySpellsBasicRegular-Yz1Wv.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span><br><span class="line">    <span class="comment">/* 定义加粗样式(加粗多少) */</span></span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="comment">/* 定义字体样式(斜体/非斜体) */</span></span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="comment">/* 定义显示样式 */</span></span><br><span class="line">    <span class="attribute">font-display</span>: block;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.butterfly.yml</code>中修改inject部分为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span><span class="comment"># custom.css文件</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>再在<code>_config.butterfly.yml</code>中修改字体font为：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">&#x27;18px&#x27;</span><span class="comment"># 全局字体大小</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="string">&#x27;14px&#x27;</span><span class="comment"># 代码字体大小</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">apple-system</span> <span class="comment"># Junbo Font# 全局字体的样式（更改为你喜欢的字体）</span></span><br><span class="line">  <span class="comment"># -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, &quot;Microsoft YaHei&quot;, sans-serif</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">&quot;PingFang SC&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft JhengHei&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft YaHei&quot;</span><span class="string">,</span> <span class="string">sans-serif</span><span class="comment"># 代码字体样式，同上</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> HEXO建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插入图片</title>
      <link href="/2024/05/04/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2024/05/04/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO-插入图片"><a href="#HEXO-插入图片" class="headerlink" title="HEXO 插入图片"></a>HEXO 插入图片</h1><p>在写笔记的时候插入图片上传到网站发现图片不能在网站上显示，第一时间想的是路径问题。</p><p>但是html的路径和主机中的路径又有差别，这其中是怎么联系起来的还不知道，于是上网找相关教程，发现两个比较好的教程（我已试验成功）如下：</p><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法 <strong>强烈推荐这个</strong></a></p><p><a href="https://zhuanlan.zhihu.com/p/280758822">hexo博客显示markdown路径的图片</a></p><p>总结为一下几步：</p><ol><li><p>typora或者你自己mardown软件图像设置如下</p><img src="/2024/05/04/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/image-20240504212233181.png" class="" title="image-20240504212233181"></li><li><p>修改<code>_config.yml</code>中的<code>post_asset_folder: true</code></p></li><li><p>在终端中输入<code>npm install hexo-image-link --save</code>下载相关插件</p></li><li><p>将写好的笔记和文件夹复制到<code>source/_posts</code>文件夹中即可，最后要注意在笔记的最上端写一些yml如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hexo插入图片</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-05-04 21:13:32</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">img:</span></span><br><span class="line"><span class="attr">coverImg:</span></span><br><span class="line"><span class="attr">password:</span></span><br><span class="line"><span class="attr">summary:</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">HEXO</span></span><br><span class="line"><span class="attr">categories:</span> [<span class="string">HEXO图片插入指南</span>]</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ol><img src="/2024/05/04/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/image-20240504211811950.png" class="" title="image-20240504211811950"><p><strong>大功告成！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> HEXO建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++(The Cherno)-Day1</title>
      <link href="/2024/05/03/C++The-Cherno-Day1/"/>
      <url>/2024/05/03/C++The-Cherno-Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="C-The-Cherno-Day1"><a href="#C-The-Cherno-Day1" class="headerlink" title="C++(The Cherno)-Day1"></a>C++(The Cherno)-Day1</h1><h2 id="How-C-Works"><a href="#How-C-Works" class="headerlink" title="How C++ Works"></a>How C++ Works</h2><p>C++是一种功能强大的编程语言，它的工作原理涉及<strong>编译</strong>和<strong>链接</strong>过程。<strong>编译器将C++源代码文件转换为目标代码，然后链接器将目标文件组合成可执行文件</strong>。下面是C++编译和链接过程的详细解释：</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p><strong>预处理</strong>：预处理器处理C++源代码文件，处理#include和#define等预处理指令。输出是一个不包含预处理指令的“纯”C++文件。</p><blockquote><p>预处理在编译之前就已完成，以#开头，实现了包含各种库/宏定义以便在接下来的编程中更好的使用库函数/宏定义</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">//预处理</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><strong>编译（Compiling）</strong>：编译器将预处理器的输出转换为汇编代码，然后将其组装成目标文件。目标文件包含编译的代码和符号定义。</p><blockquote><p> 编译由编译器完成，在VS中编译器编译（快捷键Ctrl+F7）生成<code>.obj</code>文件</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -c hello.cpp -o hello.o</span><br></pre></td></tr></table></figure><p>编译阶段出现的错误通常以<strong>Cxxx</strong>形式出现</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><strong>链接（Linking）</strong>：链接器将编译器生成的目标文件组合成可执行文件。它会解析未定义的符号引用，并将它们与其他目标文件或库中的定义进行关联。</p><blockquote><p>链接由链接器将VS编译生成的<code>.obj</code>文件转换为<code>.exe</code>可执行文件</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ hello.o -o hello</span><br></pre></td></tr></table></figure><p>这就是C++程序的基本工作原理。通过编译和链接过程，C++源代码被转换为可执行文件，可以在计算机上运行。</p><p>链接阶段出现的错误通常以<strong>Lxxx</strong>形式出现</p><h3 id="常见错误总结"><a href="#常见错误总结" class="headerlink" title="常见错误总结"></a>常见错误总结</h3><p>一个函数需要声明（Linking要做的）和定义（compiling要做的）</p><p>声明与定义不一致时：会产生<code>unresolved external symbol</code>的报错信息</p><p>多重定义时（重复定义一个函数）会产生编译错误（Compiling error）</p><p>多重声明时会产生链接错误（Linking error）</p><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>Cherno在视频里用VS演示的真绝了！看到最后有种恍然大悟的感觉，为什么要声明、定义和包含头文件讲的很透彻。可惜我主要用C++学习SLAM相关，演示有意思的编译和链接在vscode中不太好复现（CMake搞定了）</p><h2 id="Variables-in-C"><a href="#Variables-in-C" class="headerlink" title="Variables in C++"></a>Variables in C++</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>C++中的变量是用来存储数据的标识符。变量的类型决定了变量可以存储的数据类型。C++中有几种基本的数据类型，包括字符类型、整数类型、浮点类型、布尔类型和空类型。以下是一些常见的C++变量类型和示例代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Character types</span></span><br><span class="line"><span class="type">char</span> myChar = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer types</span></span><br><span class="line"><span class="type">int</span> myInt = <span class="number">7</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> myUnsignedInt = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Floating-point types</span></span><br><span class="line"><span class="type">float</span> myFloat = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> myDouble = <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean type</span></span><br><span class="line"><span class="type">bool</span> myBool = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Void type</span></span><br><span class="line"><span class="type">void</span>* myVoidPoi</span><br><span class="line">nter = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>变量的名称必须是有效的C++标识符，以字母或下划线开头，可以包含字母、数字和下划线。C++是大小写敏感的，因此大写和小写字母不同。变量的名称不能是C++的保留关键字，如if、else、int等。</p><p>除了基本数据类型外，C++还支持复合数据类型，如数组、结构体、指针等。这些数据类型可以存储更复杂的数据结构。</p><h3 id="为什么要有Char类型？"><a href="#为什么要有Char类型？" class="headerlink" title="为什么要有Char类型？"></a>为什么要有Char类型？</h3><p><strong>char</strong>类型主要是用来定义<strong>字符类型</strong>的变量，下面用程序演示一下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> CharacterWithNum = <span class="number">65</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;define char with number:&quot;</span> &lt;&lt; CharacterWithNum &lt;&lt; endl;</span><br><span class="line"><span class="type">char</span> CharacterWithChar = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;define char with character:&quot;</span> &lt;&lt; CharacterWithChar &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>上面这段程序的输出结果是什么呢？</p><p>是<code>65</code>和<code>A</code>吗？</p><p>运行了一下我们发现，结果如下</p><p><img src="/2024/05/03/C++The-Cherno-Day1/undefined"  alt="image-20240114215801431" style="zoom: 80%;" /></p><p>恍然大悟，原来char类型存在的意义就是为了程序员输出字符使用的，char类型一般使用ASCII表数字与字符的对应关系。</p><h3 id="float与double的定义"><a href="#float与double的定义" class="headerlink" title="float与double的定义"></a>float与double的定义</h3><p><img src="/2024/05/03/C++The-Cherno-Day1/undefined"  alt="image-20240114220216257" style="zoom: 50%;" /></p><p>我们在定义float类型后，运行一下程序，再回到定义的float类型变量会发现，float类型变为double类型了。</p><p>我认为这其中存在隐式转换，是系统或者编译器为了提升精度而产生的“副作用”。</p><p>那如果就要使用float类型我们可以在数字后面加上<code>f</code>（大小写都可以）</p><p><img src="/2024/05/03/C++The-Cherno-Day1/undefined"  alt="image-20240114220704501" style="zoom: 50%;" /></p><p>这样我们便得到flaot类型的变量了。</p><h3 id="常见错误总结-1"><a href="#常见错误总结-1" class="headerlink" title="常见错误总结"></a>常见错误总结</h3><p>对于新手运行完c++程序后，我们会修改代码再次运行，但有时会报这个错误：</p><p><code>严重性    代码    说明    项目    文件    行    禁止显示状态错误    LNK1168    无法打开C:\Users\20200\Desktop\Day1ForLearnCpp\Debug\Day1ForLearnCpp.exe 进行写入    Day1ForLearnCpp    C:\Users\20200\Desktop\Day1ForLearnCpp\LINK    1</code></p><p>我们一般检查代码发现并没有问题，那么问题出现到哪里了呢？</p><p><strong>错误原因：</strong></p><p>这个错误通常是由于另一个进程正在使用该文件，或没有对该文件或其所在目录的写入权限所致。</p><p><strong>解决办法：</strong></p><p>把上一个运行结果的终端关掉再次运行即可（这个错误哭笑不得）</p>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo提交git时遇到的问题</title>
      <link href="/2024/05/02/Hexo%E6%8F%90%E4%BA%A4git%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/05/02/Hexo%E6%8F%90%E4%BA%A4git%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-提交git时遇到错误"><a href="#Hexo-提交git时遇到错误" class="headerlink" title="Hexo 提交git时遇到错误"></a>Hexo 提交git时遇到错误</h1><p>在<code>hexo d</code>阶段时遇到如下错误</p><blockquote><p>fatal: unable to access ‘<a href="https://github.com/Junb0Dong/Junb0Dong.github.io.git/">https://github.com/Junb0Dong/Junb0Dong.github.io.git/</a>‘: Failed to connect to github.com port 443 after 21107 ms: Couldn’t connect to se rver FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/d">https://hexo.io/d</a> ocs/troubleshooting.html Error: Spawn failed at ChildProcess.<anonymous> (C:\Users\20200\Desktop\hexo\blog\node_modules\h exo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21) at ChildProcess.emit (node:events:518:28) at cp.emit (C:\Users\20200\Desktop\hexo\blog\node_modules\cross-spawn\lib\en oent.js:34:29) at ChildProcess._handle.onexit (node:internal/child_process:294:12)</p></blockquote><p>分析错误，怀疑可能是网络链接问题。</p><p>但是我测试能科学上网，也能在网页上登录github并提交代码，但是在终端上就不可以提交，总是显示网络问题，这个困扰我两天，搞得懵懵的。</p><p>后来在网上看到了解决方案：</p><p><a href="https://blog.csdn.net/zpf1813763637/article/details/128340109">Git报错： Failed to connect to github.com port 443 解决方案</a></p><p><a href="https://blog.csdn.net/qq_35812205/article/details/135048261">解决error: cannot overwrite multiple values with a single value Use a regexp, —add or —replac</a></p><p>发现问题原来是主机上vpn的端口设置问题，于是在git bash上进行如下设置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --unset-all http.proxy <span class="comment">#取消全局所有代理</span></span><br><span class="line">git config --global http.proxy http://your.proxy.server:port <span class="comment">#重新设置代理</span></span><br></pre></td></tr></table></figure><p>其中<code>http://your.proxy.server:port</code>为代理服务器地址和端口</p><p><strong>命令中的主机号（127.0.0.1）</strong>是使用的代理的主机号(自己电脑有vpn那么本机可看做访问github的代理主机)，即填入127.0.0.1即可，否则填入代理主机 ip(就是网上找的那个ip)</p><p><strong>命令中的端口号（7890）</strong>为代理软件vpn(代理软件不显示端口的话，就去Windows中的代理服务器设置中查看)或代理主机的监听IP，可以从代理服务器配置中获得，否则填入网上找的那个端口port </p><p>最后，我在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --unset-all http.proxy<span class="comment">#取消全局所有代理</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890<span class="comment">#重新设置代理</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HEXO建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake编译工具</title>
      <link href="/2024/05/02/CMake%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/05/02/CMake%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>对于具有多个源文件和头文件的工程而言，g++的编译效率是很低的，CMake的出现解决了这一难题，CMake文件将编译过程和编译的选项集合在一个文件中进行编译，这大大的提升了代码编译与调试的效率，下面我们来了解一下CMake的基础知识并实践。</p><h1 id="CMake编译工具"><a href="#CMake编译工具" class="headerlink" title="CMake编译工具"></a>CMake编译工具</h1><ul><li><strong>CMake</strong>是一个<strong>跨平台</strong>的安装<strong>编译工具</strong>，可以用<strong>简单</strong>的语句来描述<strong>所有平台</strong>的安装(编译过程)。</li><li>CMake可以说已经成为<strong>大部分C++开源项目标配</strong></li></ul><h2 id="CMake的语法特性"><a href="#CMake的语法特性" class="headerlink" title="CMake的语法特性"></a>CMake的语法特性</h2><ul><li>基本语法格式：指令(参数 1 参数 2…)<br>参数使用<strong>括弧</strong>括起<br>参数之间使用<strong>空格</strong>或<strong>分号</strong>分开</li><li>指令是大小写无关的，参数和变量是大小写相关的</li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">set(HELLO hello.cpp)</span><br><span class="line">add_executable(hello main.cpp hello.cpp)</span><br><span class="line">ADD_EXECUTABLE(hello main.cpp $&#123;HELLO&#125;)</span><br></pre></td></tr></table></figure><ul><li>变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</li></ul><h2 id="重要指令和CMake常用变量"><a href="#重要指令和CMake常用变量" class="headerlink" title="重要指令和CMake常用变量"></a>重要指令和CMake常用变量</h2><h3 id="重要指令"><a href="#重要指令" class="headerlink" title="重要指令"></a>重要指令</h3><ul><li><p><strong>cmake_minimum_required    指定CMake的最小版本要求</strong></p><ul><li>语法： <strong>cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMake最小版本要求为2.8.3</span></span><br><span class="line">cmake_minimum_required(VERSION 2.8.3)</span><br></pre></td></tr></table></figure></li><li><p><strong>project  定义工程名称，并可指定工程支持的语言</strong></p><ul><li>语法： <strong>project(projectname [CXX] [C] [Java])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定工程名为HELLOWORLD</span></span><br><span class="line">project(HELLOWORLD)</span><br></pre></td></tr></table></figure><blockquote><p>CXX：以c++语言编译</p></blockquote></li><li><p><strong>set  显式的定义变量</strong></p><ul><li>语法：<strong>set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量，其值为sayhello.cpp hello.cpp</span></span><br><span class="line">set(SRC sayhello.cpp hello.cpp)</span><br></pre></td></tr></table></figure><ul><li><p><strong>include_directories 向工程添加多个特定的头文件搜索路径—-&gt;相当于指定g++编译器的-I参数</strong></p><ul><li>语法： <strong>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径</span></span><br><span class="line">include_directories(/usr/<span class="keyword">include</span>/myincludefolder ./<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><blockquote><p>类似于g++中的<code>g++ -I[头文件搜索路径]</code></p></blockquote></li></ul></li><li><p><strong>link_directories 向工程添加多个特定的库文件搜索路径—-&gt;相当于指定g++编译器的-L参数</strong></p><ul><li>语法： <strong>link_directories(dir1 dir2 …)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</span></span><br><span class="line">link_directories(/usr/lib/mylibfolder ./lib)</span><br></pre></td></tr></table></figure><blockquote><p>相当于g++中的<code>g++ -L[库文件搜索路径]</code></p></blockquote></li><li><p><strong>add_library 生成库文件</strong></p><ul><li>语法： <strong>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 … sourceN)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过变量 SRC 生成 libhello.so 共享库</span></span><br><span class="line">add_library(hello SHARED $&#123;SRC&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>SHARED：共享库</p><p>STATIC：静态库</p></blockquote></li><li><p><strong>add_compile_options 添加编译参数</strong></p><ul><li>语法：<strong>add_compile_options(<option> …)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加编译参数 -Wall -std=c++11(C++11标准) -O2(二级优化)</span></span><br><span class="line">add_compile_options(-Wall -std=c++11 -O2)</span><br></pre></td></tr></table></figure></li><li><p><strong>add_executable 生成可执行文件</strong></p><ul><li>语法：<strong>add_executable(exename source1 source2 … sourceN)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译main.cpp生成可执行文件main</span></span><br><span class="line">add_executable(main main.cpp)</span><br></pre></td></tr></table></figure></li><li><p><strong>target_link_libraries 为 target 添加需要链接的共享库 —&gt;相同于指定g++编译器-l参数</strong></p><ul><li>语法： <strong>target_link_libraries(target library1<debug | optimized> library2…)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将hello动态库文件链接到可执行文件main</span></span><br><span class="line">target_link_libraries(main hello)</span><br></pre></td></tr></table></figure><blockquote><p>相当于g++中的<code>g++ -l[库名称(不带lib前缀和.a.so的后缀)]</code></p></blockquote></li><li><p><strong>add_subdirectory 向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</strong></p><ul><li>语法： <strong>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加src子目录，src中需有一个CMakeLists.txt</span></span><br><span class="line">add_subdirectory(src)</span><br></pre></td></tr></table></figure></li><li><p><strong>aux_source_directory 发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表</strong></p><ul><li>语法： <strong>aux_source_directory(dir VARIABLE)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量，其值为当前目录下所有的源代码文件</span></span><br><span class="line">aux_source_directory(. SRC)</span><br><span class="line"><span class="comment"># 编译SRC变量所代表的源代码文件，生成main可执行文件</span></span><br><span class="line">add_executable(main $&#123;SRC&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>上面这两条命令我还没有实践过不是真正的理解，等实践了回来补</p></blockquote><h3 id="CMake常用变量"><a href="#CMake常用变量" class="headerlink" title="CMake常用变量"></a>CMake常用变量</h3><ul><li><p><strong>CMAKE_C_FLAGS gcc编译选项</strong></p><p>针对C语言</p></li><li><p><strong>CMAKE_CXX_FLAGS g++编译选项</strong></p><p>针对C++语言</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在CMAKE_CXX_FLAGS编译选项后追加-std=c++11</span></span><br><span class="line">set( CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>CMAKE_BUILD_TYPE 编译类型(Debug, Release)</strong></p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设定编译类型为debug，调试时需要选择debug</span></span><br><span class="line">set(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="comment"># 设定编译类型为release，发布时需要选择release</span></span><br><span class="line">set(CMAKE_BUILD_TYPE Release)</span><br></pre></td></tr></table></figure></li><li><p><strong>CMAKE_BINARY_DIR</strong></p><p><strong>PROJECT_BINARY_DIR</strong></p><p><strong><projectname>_BINARY_DIR</strong></p><blockquote><p>这三个变量指代的内容是一致的。如果是 in source build，指的就是工程顶层目录。如果是 out-of-source 编译,指的是工程编译发生的目录。PROJECT_BINARY_DIR 跟其他指令稍有区别，不过现在，你可以理解为他们是一致的。</p></blockquote></li><li><p><strong>CMAKE_SOURCE_DIR</strong></p><p><strong>PROJECT_SOURCE_DIR<projectname>_SOURCE_DIR</strong></p><blockquote><p>这三个变量指代的内容是一致的,不论采用何种编译方式,都是工程顶层目录。也就是在 in source build时,他跟 CMAKE_BINARY_DIR 等变量一致。PROJECT_SOURCE_DIR 跟其他指令稍有区别,现在,你可以理解为他们是一致的。</p></blockquote></li><li><p><strong>CMAKE_C_COMPILER：指定C编译器</strong></p></li><li><p><strong>CMAKE_CXX_COMPILER：指定C++编译器</strong></p></li><li><p><strong>EXECUTABLE_OUTPUT_PATH：可执行文件输出的存放路径</strong></p></li><li><p><strong>LIBRARY_OUTPUT_PATH：库文件输出的存放路径</strong></p></li></ul><h2 id="CMake-编译工程"><a href="#CMake-编译工程" class="headerlink" title="CMake 编译工程"></a>CMake 编译工程</h2><p>CMake目录结构：项目主目录存在一个CMakeLists.txt文件</p><p><strong>两种方式设置编译规则</strong>：</p><ol><li>包含源文件的子文件夹<strong>包含</strong>CMakeLists.txt文件，主目录的CMakeLists.txt通过add_subdirectory添加子目录即可；</li><li>包含源文件的子文件夹<strong>未包含</strong>CMakeLists.txt文件，子目录编译规则体现在主目录的CMakeLists.txt中；</li></ol><h3 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h3><p><strong>在 linux 平台下使用 CMake 构建C/C++工程的流程如下:</strong></p><ul><li>手动编写 CMakeLists.txt。</li><li>执行命令 <code>cmake PATH</code>生成 <strong>Makefile</strong> ( PATH 是顶层CMakeLists.txt 所在的目录 )。</li><li>执行命令<code>make</code> 进行编译。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># important tips</span></span><br><span class="line">.  <span class="comment"># 表示当前目录</span></span><br><span class="line">./ <span class="comment"># 表示当前目录</span></span><br><span class="line"></span><br><span class="line">..  <span class="comment"># 表示上级目录</span></span><br><span class="line">../ <span class="comment"># 表示上级目录</span></span><br></pre></td></tr></table></figure><h3 id="外部构建-out-of-source-build"><a href="#外部构建-out-of-source-build" class="headerlink" title="外部构建(out-of-source build)"></a>外部构建(out-of-source build)</h3><p>将编译输出文件与源文件放到不同目录中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 外部构建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 在当前目录下，创建build文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="comment"># 2. 进入到build文件夹</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># 4. 执行make命令，生成target</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h1 id="CMake编译实践"><a href="#CMake编译实践" class="headerlink" title="CMake编译实践"></a>CMake编译实践</h1><h2 id="最小的CMake工程"><a href="#最小的CMake工程" class="headerlink" title="最小的CMake工程"></a>最小的CMake工程</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set the minimum version of CMake that can be used</span></span><br><span class="line">cmake_minimum_required(VERSION 3.0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line">project (HELLO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line">add_executable(hello_cmake main.cpp)</span><br></pre></td></tr></table></figure><blockquote><p>针对单一的cpp文件，g++更方便</p></blockquote><h2 id="多目录CMake工程"><a href="#多目录CMake工程" class="headerlink" title="多目录CMake工程"></a>多目录CMake工程</h2><h3 id="直接编译"><a href="#直接编译" class="headerlink" title="直接编译"></a>直接编译</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set the minimum version of CMake that can be used</span></span><br><span class="line">cmake_minimum_required(VERSION 3.0)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project name</span></span><br><span class="line">project(SWAP)</span><br><span class="line"></span><br><span class="line"><span class="comment">#head file path</span></span><br><span class="line">include_directories( <span class="keyword">include</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#source directory files to var</span></span><br><span class="line">add_subdirectory( src DIR_SRCS )</span><br><span class="line"></span><br><span class="line"><span class="comment">#add executable file</span></span><br><span class="line">add_executable(swap_02 $&#123;TEST_MATH&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add link library</span></span><br><span class="line">target_link_libraries($&#123;FS_BUILD_BINARY_PREFIX&#125;sqrt $&#123;LIBRARIES&#125;)</span><br></pre></td></tr></table></figure><h3 id="生成库编译"><a href="#生成库编译" class="headerlink" title="生成库编译"></a>生成库编译</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set the minimum version of CMake that can be used</span></span><br><span class="line">cmake_minimum_required(VERSION 3.0)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project name</span></span><br><span class="line">project(SWAP_LIBRARY)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add compile options</span></span><br><span class="line">add_compile_options(<span class="string">&quot;-Wall -std=c++11&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#set CMAKE_BUILD_TYPE</span></span><br><span class="line">set( CMAKE_BUILD_TYPE Debug )</span><br><span class="line"></span><br><span class="line"><span class="comment"># set output binary path</span></span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create a library</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate the static library from the library sources</span></span><br><span class="line">add_library( swap_library STATIC src/Swap.cpp )</span><br><span class="line"></span><br><span class="line">target_include_directories( swap_lib PUBLIC $&#123;PROJECT_SOURCE_DIR&#125;/<span class="keyword">include</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create an executable</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable with the above sources</span></span><br><span class="line">add_executable( swap_01 main.cpp )</span><br><span class="line"></span><br><span class="line"><span class="comment"># link the new swap_01 target with the swap_lib target</span></span><br><span class="line">target_link_libraries( swap_01 swap_liby )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
          <category> 编译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
